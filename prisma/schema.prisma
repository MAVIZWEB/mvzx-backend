 // This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  phone       String
  password    String
  pin         String
  referrerId  Int?
  referrer    User?    @relation("UserReferrals", fields: [referrerId], references: [id])
  referrals   User[]   @relation("UserReferrals")
  wallet      Wallet?
  purchases   Purchase[]
  matrices    Matrix[]
  earnings    Earning[]
  withdrawals Withdrawal[]
  stakings    Staking[]
  stakingRewards StakingReward[]
  referralRewardsGiven ReferralReward[] @relation("ReferrerRewards")
  referralRewardsReceived ReferralReward[] @relation("PurchaserRewards")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([email])
}

model Wallet {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  user         User     @relation(fields: [userId], references: [id])
  address      String   @unique
  balance      Float    @default(0)
  lockedBalance Float   @default(0)
  stakedBalance Float   @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

model Purchase {
  id             Int      @id @default(autoincrement())
  userId         Int
  user           User     @relation(fields: [userId], references: [id])
  amount         Float
  currency       String
  paymentMethod  String
  status         String   @default("pending")
  txHash         String?
  txRef          String?
  flwRef         String?
  proofImage     String?
  bankName       String?
  accountName    String?
  accountNumber  String?
  matrixDistributions MatrixDistribution[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model Matrix {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  stage       Int
  position    Int      @default(0)
  earnings    Float    @default(0)
  distributions MatrixDistribution[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, stage])
  @@index([userId])
  @@index([stage])
}

model MatrixDistribution {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  purchaseId  Int
  purchase    Purchase @relation(fields: [purchaseId], references: [id])
  stage       Int
  matrixBase  Float
  mcReward    Float
  jbReward    Float
  nspReward   Float
  crReward    Float
  lpReward    Float
  cpReward    Float
  createdAt   DateTime @default(now())

  @@index([userId])
}

model ReferralReward {
  id              Int      @id @default(autoincrement())
  purchaserId     Int
  purchaser       User     @relation("PurchaserRewards", fields: [purchaserId], references: [id])
  referrerId      Int
  referrer        User     @relation("ReferrerRewards", fields: [referrerId], references: [id])
  amount          Float
  purchaserReward Float
  referrerReward  Float
  currency        String
  originalAmount  Float
  createdAt       DateTime @default(now())

  @@index([referrerId])
}

model Earning {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  amount      Float
  type        String
  description String?
  createdAt   DateTime @default(now())

  @@index([userId])
}

model Withdrawal {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  amount      Float
  method      String
  destination String
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model Staking {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  amount       Float
  duration     Int
  apy          Float
  maturityDate DateTime
  status       String   @default("active")
  rewards      StakingReward[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

model StakingReward {
  id         Int      @id @default(autoincrement())
  stakingId  Int
  staking    Staking  @relation(fields: [stakingId], references: [id])
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  amount     Float
  rewardDate DateTime
  createdAt  DateTime @default(now())

  @@index([userId])
}
