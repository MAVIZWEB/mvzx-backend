generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  password      String
  wallet        String?       // User's personal wallet (for USDT deposits/withdrawals)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  walletBalance WalletBalance? // Relation to balances
  matrix        Matrix[]
  staking       Staking[]
  referrals     Referral[]    @relation("UserReferrals")
  referredBy    Referral?     @relation("ReferralSource", fields: [referredById], references: [id])
  referredById  String?
  transactions  Transaction[]
}

model WalletBalance {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id])
  usdt      Float   @default(0)
  mvzx      Float   @default(0)
  black     Float   @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Matrix {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  stage     Int
  earnings  Float    @default(0) // track userâ€™s earnings in matrix
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String   // deposit, withdrawal, staking, referral, etc.
  amount    Float
  token     String   // USDT, MVZX, BLACK
  status    String   @default("pending")
  txHash    String?  // For USDT blockchain payments
  createdAt DateTime @default(now())
}

model Staking {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  amount    Float
  reward    Float    @default(0)
  startDate DateTime @default(now())
  endDate   DateTime?
}

model Referral {
  id         String   @id @default(uuid())
  referrerId String
  referredId String
  referrer   User     @relation("UserReferrals", fields: [referrerId], references: [id])
  referred   User     @relation("ReferralSource", fields: [referredId], references: [id])
  reward     Float    @default(0)
  createdAt  DateTime @default(now())
}
