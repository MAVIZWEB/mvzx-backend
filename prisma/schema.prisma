 generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  phone           String
  password        String
  pin             String
  referrerId      Int?
  referrer        User?    @relation("UserReferrer", fields: [referrerId], references: [id])
  referrals       User[]   @relation("UserReferrer")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  wallet          Wallet?
  purchases       Purchase[]
  matrices        Matrix[]
  earnings        Earning[]
  withdrawals     Withdrawal[]
  stakings        Staking[]
  stakingRewards  StakingReward[]
  referralRewards ReferralReward[] @relation("ReferralRewardPurchaser")
  referrerRewards ReferralReward[] @relation("ReferralRewardReferrer")

  @@map("users")
}

model Wallet {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  user         User     @relation(fields: [userId], references: [id])
  address      String   @unique
  balance      Float    @default(0)
  lockedBalance Float   @default(0)
  stakedBalance Float   @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("wallets")
}

model Purchase {
  id             Int      @id @default(autoincrement())
  userId         Int
  user           User     @relation(fields: [userId], references: [id])
  amount         Float
  currency       String
  paymentMethod  String
  status         String   @default("pending")
  txHash         String?
  txRef          String?
  flwRef         String?
  proofImage     String?
  bankName       String?
  accountName    String?
  accountNumber  String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  matrixDistributions MatrixDistribution[]

  @@map("purchases")
}

model Matrix {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  stage       Int
  position    Int      @default(0)
  earnings    Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  distributions MatrixDistribution[]

  @@unique([userId, stage])
  @@map("matrices")
}

model MatrixDistribution {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  purchaseId  Int
  purchase    Purchase @relation(fields: [purchaseId], references: [id])
  stage       Int
  matrixBase  Float
  mcReward    Float
  jbReward    Float
  nspReward   Float
  crReward    Float
  lpReward    Float
  cpReward    Float
  createdAt   DateTime @default(now())

  @@map("matrix_distributions")
}

model ReferralReward {
  id               Int      @id @default(autoincrement())
  purchaserId      Int
  purchaser        User     @relation("ReferralRewardPurchaser", fields: [purchaserId], references: [id])
  referrerId       Int
  referrer         User     @relation("ReferralRewardReferrer", fields: [referrerId], references: [id])
  amount           Float
  purchaserReward  Float
  referrerReward   Float
  currency         String
  originalAmount   Float
  createdAt        DateTime @default(now())

  @@map("referral_rewards")
}

model Earning {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  amount      Float
  type        String
  description String?
  createdAt   DateTime @default(now())

  @@map("earnings")
}

model Withdrawal {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  amount      Float
  method      String
  destination String
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("withdrawals")
}

model Staking {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  amount       Float
  duration     Int
  apy          Float
  maturityDate DateTime
  status       String   @default("active")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  stakingRewards StakingReward[]

  @@map("stakings")
}

model StakingReward {
  id         Int      @id @default(autoincrement())
  stakingId  Int
  staking    Staking  @relation(fields: [stakingId], references: [id])
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  amount     Float
  rewardDate DateTime
  createdAt  DateTime @default(now())

  @@map("staking_rewards")
}
